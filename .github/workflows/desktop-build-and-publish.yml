name: Desktop - Build and publish electron app

on:
  push:
    branches:
      - 'linux-build'
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: true
        default: '0.3.4'
        type: string
      build_type:
        description: 'Type of build to run'
        required: true
        default: 'linux'
        type: choice
        options:
          - linux
          - windows
          - macos
          - all

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'npm'

      - name: Cache Electron (Windows)
        uses: actions/cache@v3
        with:
          path: |
            ~\AppData\Local\electron\Cache
            ~\AppData\Local\electron-builder\Cache
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-

      - name: Extract version from tag
        shell: pwsh
        run: |
          $version = $env:GITHUB_REF -replace '^refs/tags/v',''
          echo "VERSION=$version" >> $env:GITHUB_ENV

      - name: Set version and commit SHA into build.ts
        shell: pwsh
        run: |
          $content = @'
          // This file is auto-generated during CI/CD
          const VERSION = "${{ env.VERSION }}";
          const SHA = "${{ github.sha }}";

          export const build = {
              version: VERSION,
              sha: SHA
          };
          '@
          Set-Content -Path "./packages/core/src/types/build.ts" -Value $content

      - name: Decode certificate
        run: |
          $certPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "build_cert.pfx"
          $certContent = [System.Convert]::FromBase64String($env:WINDOWS_CERT_BASE64)
          [IO.File]::WriteAllBytes($certPath, $certContent)
          echo "CERTIFICATE_PATH=$certPath" >> $env:GITHUB_ENV
        shell: pwsh
        env:
          WINDOWS_CERT_BASE64: ${{ secrets.WINDOWS_CERT_BASE64 }}

      - name: Update package.json version
        shell: bash
        working-directory: apps/desktop
        run: npm version ${VERSION} --no-git-tag-version

      - name: Install Dependencies
        run: |
          npm ci

      - name: Build Electron App
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CERTIFICATE_PATH: ${{ env.CERTIFICATE_PATH }}
          CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
          NODE_ENV: production
        working-directory: apps/desktop
        run: npm run publish -- --win

      - name: Clean up certificate
        run: |
          if (Test-Path $env:CERTIFICATE_PATH) {
            Remove-Item -Path $env:CERTIFICATE_PATH
          }
        shell: pwsh

  build-macos:
    runs-on: macos-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'npm'

      - name: Cache Electron (macOS)
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/electron
            ~/Library/Caches/electron-builder
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-

      - name: Extract version from tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Set version and commit SHA into build.ts
        run: |
          cat <<EOF > ./packages/core/src/types/build.ts
          // This file is auto-generated during CI/CD
          const VERSION = "${{ env.VERSION }}";
          const SHA = "${{ github.sha }}";

          export const build = {
              version: VERSION,
              sha: SHA
          };
          EOF

      - name: Decode and Import macOS Certificate
        run: |
          # Decode the base64 encoded certificate
          CERTIFICATE_CONTENT=$(echo "${{ secrets.MACOS_CERTIFICATE_BASE64 }}" | base64 --decode)

          # Create a temporary keychain
          KEYCHAIN_PATH="${RUNNER_TEMP}/temporary.keychain"
          security create-keychain -p "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" "${KEYCHAIN_PATH}"

          # Import the certificate into the temporary keychain
          echo "${CERTIFICATE_CONTENT}" > "${RUNNER_TEMP}/certificate.p12"
          security import "${RUNNER_TEMP}/certificate.p12" -k "${KEYCHAIN_PATH}" -P "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign

          # Set the temporary keychain as the default keychain
          security default-keychain -s "${KEYCHAIN_PATH}"

          # Unlock the keychain
          security unlock-keychain -p "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" "${KEYCHAIN_PATH}"

          # Optionally, list available keys to verify (for debugging)
          security find-identity -v -p codesigning

          # Set environment variables for codesigning
          echo "KEYCHAIN_PATH=${KEYCHAIN_PATH}" >> $GITHUB_ENV
          echo "KEYCHAIN_PASSWORD=${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" >> $GITHUB_ENV
        shell: bash

      - name: Update package.json version
        working-directory: apps/desktop
        run: npm version $VERSION --no-git-tag-version

      - name: Install Dependencies
        run: |
          npm ci

      - name: Publish and Notarize Electron App (macOS Apple Silicon)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PATH: ${{ env.KEYCHAIN_PATH }}
          KEYCHAIN_PASSWORD: ${{ env.KEYCHAIN_PASSWORD }}
        working-directory: apps/desktop
        run: |
          npm run publish -- --mac --arch="arm64"

      - name: Publish and Notarize Electron App (macOS Intel)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PATH: ${{ env.KEYCHAIN_PATH }}
          KEYCHAIN_PASSWORD: ${{ env.KEYCHAIN_PASSWORD }}
        working-directory: apps/desktop
        run: |
          npm run publish -- --mac --arch="x64"

      - name: Delete Temporary Keychain
        if: always()
        run: |
          security delete-keychain "${{ env.KEYCHAIN_PATH }}"
        shell: bash

  build-linux:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'workflow_dispatch' && 
       (github.event.inputs.build_type == 'linux' || github.event.inputs.build_type == 'all'))

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && 'linux-build' || github.ref }}
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'npm'

      - name: Cache Electron (Linux)
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-

      - name: Extract version from tag or input
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          else
            # For branch pushes, use a default version or extract from package.json
            echo "VERSION=0.3.4" >> $GITHUB_ENV
          fi

      - name: Set version and commit SHA into build.ts
        run: |
          cat <<EOF > ./packages/core/src/types/build.ts
          // This file is auto-generated during CI/CD
          const VERSION = "${{ env.VERSION }}";
          const SHA = "${{ github.sha }}";

          export const build = {
              version: VERSION,
              sha: SHA
          };
          EOF

      - name: Update package.json version
        working-directory: apps/desktop
        run: |
          # Update version without triggering npm hooks
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '${{ env.VERSION }}';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "

      - name: Install Root Dependencies
        run: npm install

      - name: Install Dependencies
        working-directory: apps/desktop
        run: npm install

      - name: Build Electron App (Linux)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production
        working-directory: apps/desktop
        run: npm run make -- --platform=linux

      - name: Debug Build Output
        working-directory: apps/desktop
        run: |
          echo "=== Build Output Directory Structure ==="
          find out/ -type f -name "colanode*" 2>/dev/null || echo "No colanode files found"
          echo "=== Full out/ directory contents ==="
          ls -la out/ || echo "out/ directory not found"
          echo "=== Looking for DEB and RPM packages ==="
          find out/ -name "*.deb" -o -name "*.rpm" 2>/dev/null || echo "No DEB or RPM packages found"
          echo "=== Looking for ZIP packages ==="
          find out/ -name "*.zip" 2>/dev/null || echo "No ZIP packages found"
          echo "=== Package.json contents ==="
          cat package.json | grep -E "(name|version|executableName)"
          echo "=== Forge config name ==="
          echo "Expected name: colanode"
          echo "=== Looking for executable ==="
          find out/ -name "colanode" -type f 2>/dev/null || echo "Executable 'colanode' not found"
          echo "=== Expected binary path ==="
          echo "Should be: out/colanode-linux-x64/colanode"

      - name: Publish Electron App
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production
        working-directory: apps/desktop
        continue-on-error: true
        run: |
          echo "🚀 Attempting to publish to GitHub releases..."
          echo "📝 Note: Publishing requires GitHub repository permissions"
          echo "🔧 If publish fails, packages are still available as artifacts"
          
          # Try to publish, but don't fail the build if it doesn't work
          set +e  # Don't exit on error
          npm run publish 2>&1
          PUBLISH_EXIT_CODE=$?
          
          if [ $PUBLISH_EXIT_CODE -ne 0 ]; then
            echo "⚠️  Publish failed, but build succeeded!"
            echo "📦 Your Linux packages are available as artifacts above"
            echo "🔍 Publish error details saved above"
            echo "💡 To fix publish issues, check:"
            echo "   1. GitHub repository settings → Actions → General"
            echo "   2. Ensure 'Read and write permissions' is enabled"
            echo "   3. Ensure 'Allow GitHub Actions to create and approve pull requests' is enabled"
            echo "✅ Build completed successfully despite publish failure"
          else
            echo "✅ Publish completed successfully!"
          fi
          
          # Always exit with success to continue the workflow
          exit 0

      - name: Upload DEB Package
        uses: actions/upload-artifact@v4
        with:
          name: Colanode-${{ env.VERSION }}-amd64.deb
          path: apps/desktop/out/**/*.deb
          retention-days: 30

      - name: Upload RPM Package
        uses: actions/upload-artifact@v4
        with:
          name: Colanode-${{ env.VERSION }}-amd64.rpm
          path: apps/desktop/out/**/*.rpm
          retention-days: 30

      - name: Upload Linux ZIP Package
        uses: actions/upload-artifact@v4
        with:
          name: Colanode-${{ env.VERSION }}-linux-x64.zip
          path: apps/desktop/out/**/*.zip
          retention-days: 30
        continue-on-error: true
